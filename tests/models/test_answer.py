import pytest
from pydantic import ValidationError

from bakeneko.models import Answer

invalid_data = [
    # ONE
    {
        "question": "question",
        "type": "ONE1",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ONE",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1", "2"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ONE",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": ["A"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ONE",
        "all_answers": [],
        "all_extra_answers": ["A", "B"],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ONE",
        "all_answers": [],
        "all_extra_answers": ["A", "B"],
        "answer": ["1"],
        "extra_answer": ["A"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ONE",
        "all_answers": ["1"],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    # MANY
    {
        "question": "question",
        "type": "MANY1",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MANY",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": ["A"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MANY",
        "all_answers": [],
        "all_extra_answers": ["A", "B"],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MANY",
        "all_answers": [],
        "all_extra_answers": ["A", "B"],
        "answer": ["1"],
        "extra_answer": ["A"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MANY",
        "all_answers": ["1"],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    # MATCH
    {
        "question": "question",
        "type": "MATCH1",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": ["1", "2", "3"],
        "all_extra_answers": [],
        "answer": ["1", "3"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1", "3"],
        "extra_answer": ["A", "B", "C"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": [],
        "extra_answer": ["A", "B", "C"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": ["1", "2", "3"],
        "all_extra_answers": ["A", "B"],
        "answer": ["1", "2", "3"],
        "extra_answer": ["A", "B"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": ["1", "2", "3"],
        "all_extra_answers": ["A"],
        "answer": ["1", "2", "3"],
        "extra_answer": ["A"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": ["1", "2"],
        "all_extra_answers": ["A", "B"],
        "answer": ["1", "2"],
        "extra_answer": ["A", "B", "C"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": ["1", "2"],
        "all_extra_answers": [],
        "answer": ["1", "2"],
        "extra_answer": ["A", "B", "C"],
        "is_correct": True,
    },
    # ORDER
    {
        "question": "question",
        "type": "ORDER1",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ORDER",
        "all_answers": ["1", "2"],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ORDER",
        "all_answers": ["1", "2"],
        "all_extra_answers": ["A", "B"],
        "answer": ["1", "2"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ORDER",
        "all_answers": ["1", "2"],
        "all_extra_answers": ["A", "B"],
        "answer": ["1", "2"],
        "extra_answer": ["A", "B"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ORDER",
        "all_answers": ["1", "2"],
        "all_extra_answers": [],
        "answer": ["1", "2"],
        "extra_answer": ["A", "B"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ORDER",
        "all_answers": ["1", "2"],
        "all_extra_answers": [],
        "answer": ["1", "3"],
        "extra_answer": [],
        "is_correct": True,
    },
]


@pytest.mark.parametrize("data", invalid_data)
def test_invalid_data(data):
    with pytest.raises(ValidationError):
        Answer.parse_obj(data)


valid_data = [
    # ONE
    {
        "question": "question",
        "type": "ONE",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ONE",
        "all_answers": ["1", "2"],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    # MANY
    {
        "question": "question",
        "type": "MANY",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MANY",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1", "2"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MANY",
        "all_answers": ["1", "2", "3"],
        "all_extra_answers": [],
        "answer": ["1"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MANY",
        "all_answers": ["1", "2", "3"],
        "all_extra_answers": [],
        "answer": ["1", "2"],
        "extra_answer": [],
        "is_correct": True,
    },
    # ORDER
    {
        "question": "question",
        "type": "ORDER",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1", "2", "3"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "ORDER",
        "all_answers": ["1", "2", "3"],
        "all_extra_answers": [],
        "answer": ["1", "2", "3"],
        "extra_answer": [],
        "is_correct": True,
    },
    # MATCH
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1", "2", "3"],
        "extra_answer": [],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": [],
        "all_extra_answers": [],
        "answer": ["1", "2", "3"],
        "extra_answer": ["A", "B", "C"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": ["1", "2", "3"],
        "all_extra_answers": [],
        "answer": ["1", "2", "3"],
        "extra_answer": ["A", "B", "C"],
        "is_correct": True,
    },
    {
        "question": "question",
        "type": "MATCH",
        "all_answers": ["1", "2", "3"],
        "all_extra_answers": ["A", "B", "C"],
        "answer": ["1", "2", "3"],
        "extra_answer": ["A", "B", "C"],
        "is_correct": True,
    },
]


@pytest.mark.parametrize("data", valid_data)
def test_valid_data(data):
    Answer.parse_obj(data)
